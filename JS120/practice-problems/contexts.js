/* 1.  What will the code output and why?

The code outputs the global object.  In node its `global` while in browser it's `window`
Since line 5 calls func as a function, the implicit context for func is the global object, so it returns the global object.

*/
// function func() {
//   return this;
// }

// let context = func();

// console.log(context);

/*
2. What will the following code output? Explain the difference, if any, between this output and that of problem 1.

Unlike problem 1, this code outputs the object obj since it invokes func as a method. The output looks like this in Node:

{ func: [Function: func] }

As a method invocation, it receives an implicit execution context that refers to the object used to invoke it.
*/

// let obj = {
//   func: function () {
//     return this;
//   },
// };

// let context = obj.func();

// console.log(context);

/*
3. What will the following code output?

Hello from the global scope!
Hello from the function scope!

The first log operation is generated by the function call, deliverMessage() on line 45. Since this is a function invocation, the implicit function execution context is the global object; the global property message, which is often called a global variable, is referenced. The second log operation is generated by the method call foo.deliverMessage() on line 59. Since the implicit function execution context for a method invocation is the calling object, this resolves to foo.message

*/

// message = "Hello from the global scope!";

// function deliverMessage() {
//   console.log(this.message);
// }

// deliverMessage();

// let foo = {
//   message: "Hello from the function scope!",
// };

// foo.deliverMessage = deliverMessage;

// foo.deliverMessage();

/*
4. What built-in methods have we learned about that we can use to specify a function's execution context explicitly?

call and apply.  
*/

/*
5: Take a look at the following code snippet. Use call to invoke the add method but with foo as execution context. What will this return?
*/

let foo = {
  a: 1,
  b: 2,
};

let bar = {
  a: "abc",
  b: "def",
  add: function () {
    return this.a + this.b;
  },
};

console.log(bar.add.call(foo));
